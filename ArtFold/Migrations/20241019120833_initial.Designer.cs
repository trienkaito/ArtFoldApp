// <auto-generated />
using System;
using ArtFold.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtFold.Migrations
{
    [DbContext(typeof(ArtFoldDbContext))]
    [Migration("20241019120833_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartID = new Guid("1473e255-5124-42a0-b67a-ffccafdce7b5"),
                            UserID = "77b5473f-4397-40c2-8c21-750d3e407317"
                        },
                        new
                        {
                            CartID = new Guid("89f21c2c-570e-4e5c-82b1-7ba5b7973ab8"),
                            UserID = "c6d9c36f-09bf-4cd2-8fe9-8ee49e690d54"
                        },
                        new
                        {
                            CartID = new Guid("2fbbbfe1-c499-424b-ba15-d9860c945be9"),
                            UserID = "3b7a6789-7551-4c71-9138-9cc50ce7df36"
                        },
                        new
                        {
                            CartID = new Guid("f73e4336-0ee3-4e0d-91d2-1ce04a0f4757"),
                            UserID = "9c72a140-883f-4318-ba86-7eab60208c49"
                        },
                        new
                        {
                            CartID = new Guid("1c38f7ee-9739-4de7-9693-3c7824d862a0"),
                            UserID = "bba66c5f-2628-4559-8cb0-a2882839b04e"
                        },
                        new
                        {
                            CartID = new Guid("a7c93407-71af-48bd-9654-4301aa6cbb3e"),
                            UserID = "c3b81fe4-df66-46b7-94dc-46bfcfccba4b"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCartQuantity")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CategoryName = "Anime"
                        },
                        new
                        {
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CategoryName = "Vehicle"
                        },
                        new
                        {
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CategoryName = "Marvel"
                        },
                        new
                        {
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CategoryName = "Architecture"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Property<Guid>("CheckOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CheckOutID");

                    b.HasIndex("UserID");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOutProduct", b =>
                {
                    b.Property<Guid>("CheckOutProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckOutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CheckOutProductID");

                    b.HasIndex("CheckOutID");

                    b.HasIndex("ProductID");

                    b.ToTable("CheckOutProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.Property<Guid>("CommentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentsImage");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PrintPaperType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("4cae498c-f91d-41c8-818f-8aac9f48b4c5"),
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7221),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Goku SSJ HD – Dragon Ball bao gồm:\r\n- 25 tờ kit mô hình.\r\n- Kích thước: Cao: 55,5cm x Rộng: 13,4cm x Sâu: 23,9cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/ea93877ccd8d3700b6b9ede4220df541.webp",
                            Name = "Son Goku",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 50,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7225)
                        },
                        new
                        {
                            ProductID = new Guid("9d711647-d878-4915-ba5d-dfa3bb2c65e2"),
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7239),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Monkey D Luffy - One Piece bao gồm:\r\n- 18 tờ kit mô hình.\r\n- Kích thước: Cao: 40cm x Rộng: 23,4cm x Sâu: 21,6cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e82a586f3d146ea83a3b6303b4668914.webp",
                            Name = "Monkey D. Luffy",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 100,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7239)
                        },
                        new
                        {
                            ProductID = new Guid("0d1607f4-a568-456f-9e45-3724c129ce62"),
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7248),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Uzumaki Naruto ver 3 bao gồm:\r\n- 6 tờ kit mô hình.\r\n(Mặc định bản kit sẽ được in bản có line, nếu bạn muốn in bản ko line trong đơn hàng bạn ghi chú là \"in bản ko line\" để shop cho in nhé)\r\n- Kích thước A4: Cao: 17cm x Rộng: 20,1cm x Sâu: 28,3cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/sg-11134201-22110-igsmlbzefhkvf0.webp",
                            Name = "Uzumaki Naruto",
                            Price = 42000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7249)
                        },
                        new
                        {
                            ProductID = new Guid("dc8fce56-18e2-468c-bc60-675f9f59711c"),
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7254),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Pokemon Pikachu Polygon ver 2 bao gồm:\r\n- 9 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 4 tờ hướng dẫn lắp ráp.\r\n- Kích thước A4: Cao: 33cm x Rộng: 30cm x Sâu: 34cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-ls9lvceatuah97@resize_w450_nl.webp",
                            Name = "Pikachu Polygon ver 2",
                            Price = 59000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7254)
                        },
                        new
                        {
                            ProductID = new Guid("4c9f7f8f-08b0-4f5a-bb4b-9670660c6564"),
                            CategoryID = new Guid("5ad1f1bf-0bb0-411b-8742-7e957ebb1ac3"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7276),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Levi Ackerman ver 3 – Attack on Titan bao gồm:\r\n- 6 tờ kit mô hình.\r\n- Kích thước: Cao: 20,3cm x Rộng: 11,1cm x Sâu: 18cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a6da3b4677bd9309784051610617a5e7@resize_w450_nl.webp",
                            Name = "Chibi Levi Ackerman",
                            Price = 14000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 80,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7276)
                        },
                        new
                        {
                            ProductID = new Guid("6cf406b9-0ffa-45ca-94c5-fd6302e3bd4f"),
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7383),
                            Description = "Bộ sản phẩm Mô hình giấy phi thuyền không gian vũ trụ tàu con thoi Space Shuttle Atlantis bao gồm:\r\n- 11 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4ed6a6e35f435d28286762c02db7f911.webp",
                            Name = "Space Shuttle Atlantis",
                            Price = 72000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7384)
                        },
                        new
                        {
                            ProductID = new Guid("c80cc419-9cdc-4619-9d1b-fa5c9e539632"),
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7390),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Lamborghini Sesto Elemento bao gồm:\r\n- 3 tờ kit mô hình.\r\n- Kích thước: Cao: 4,9cm x Rộng: 8,6cm x Sâu: 18,1cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/966ca26a8de1b2f34c66449cc74e48bd.webp",
                            Name = "Lamborghini Sesto Elemento",
                            Price = 69000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7391)
                        },
                        new
                        {
                            ProductID = new Guid("65d04395-587b-4325-a4b0-59d9fe099183"),
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7401),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Prototype Technology Group BMW bao gồm:\r\n- 6 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/9fb112bf0fe8b6b773c0aa7411a2392c.webp",
                            Name = "Prototype Technology Group BMW",
                            Price = 79000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7401)
                        },
                        new
                        {
                            ProductID = new Guid("c27f87ab-a1cf-44ff-b696-1e03ba52e903"),
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7408),
                            Description = "Bộ sản phẩm Mô hình giấy xe máy Mille Miglia Custom Chopper bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 8 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/2fbbe89ee72a717b7f2bed3a84d8b259.webp",
                            Name = "Mille Miglia Custom Chopper Bike",
                            Price = 149000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7408)
                        },
                        new
                        {
                            ProductID = new Guid("9efdfeed-3495-4d67-8e42-5a4eb82ee62a"),
                            CategoryID = new Guid("a0223bc3-9ffc-478e-8268-c418decf70b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7418),
                            Description = "Bộ sản phẩm Mô hình giấy máy bay Boeing 777-200 British Airways bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a09cfa936019a5e6c493acafbd4a13e1.webp",
                            Name = "Boeing 777-200 British Airways",
                            Price = 58000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7419)
                        },
                        new
                        {
                            ProductID = new Guid("5867c5a3-2eed-4e7d-89b9-3259fb1e33b5"),
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7429),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avenger Robot Iron Man Mark VII bao gồm:\r\n- 16 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5fc4fc6d877bc7c905b6f92eeb951a94.webp",
                            Name = "Robot Iron Man Mark VII",
                            Price = 105000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7430)
                        },
                        new
                        {
                            ProductID = new Guid("67f2ac12-41c8-42c2-aa09-f6e4f31dbaf1"),
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7435),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Thor mập - Marvel bao gồm:\r\n- 8 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 2 tờ hướng dẫn lắp ráp.\r\n- Kích thước : Cao 15,5cm x Rộng 13cm x Sâu 9cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lmua3ev8pza778.webp",
                            Name = "Chibi Thor ",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7436)
                        },
                        new
                        {
                            ProductID = new Guid("ec63fa84-95f7-40f6-a6d9-bf139bedf0a5"),
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7441),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Marvel Hulk Treo tường ver 3 bao gồm:\r\n– 17 tờ kit mô hình in trên giấy A4 Ford màu định lượng 180gsm (so với giấy photo là 70gsm) + scan code xem hướng dẫn.\r\n- Kích thước: Cao: khoảng 40cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/8aedf29f64c9de9ac7ec2b3f48182f7b.webp",
                            Name = "Marvel Hulk Wall Hanging",
                            Price = 83000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7442)
                        },
                        new
                        {
                            ProductID = new Guid("2d370af7-83bc-4b7c-a735-e60afa600f27"),
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7456),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avengers Iron Spider bao gồm:\r\n- 15 tờ kit mô hình.\r\n- Kích thước: Cao: 38cm x Rộng: 30,7cm x Sâu: 34,5cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4b925257b8c606d8ba5549860b146ad1.webp",
                            Name = "Marvel Avengers Iron Spider",
                            Price = 100000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7466)
                        },
                        new
                        {
                            ProductID = new Guid("9ee99784-2643-4204-b45d-40bb9b688d5f"),
                            CategoryID = new Guid("0a843071-4ee3-402a-ab7e-dd8874bcfd6f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7476),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Doctor Strange - Marvel bao gồm:\r\n- 2 tờ kit mô hình + kèm scan code xem video hướng dẫn lắp ráp.\r\n* Xuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lzad737x2krla7@resize_w450_nl.webp",
                            Name = "Chibi Doctor Strange",
                            Price = 25000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7477)
                        },
                        new
                        {
                            ProductID = new Guid("5b4f83b6-8f1d-4912-b61d-f42eb89bdfa2"),
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7483),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc lâu đài Đức Neuschwanstein Castle - Germany bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/d50b7f9c059c8cb8e7c0654954a08ab1.webp",
                            Name = "Neuschwanstein Castle - Germany",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7483)
                        },
                        new
                        {
                            ProductID = new Guid("192c7a8f-6a81-4283-971c-9d114b4e813c"),
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7490),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Tháp Luân Đôn Tower of London – England bao gồm:\r\n- 10 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5e96e9613e2fd22d255d9d90159d19ce.webp",
                            Name = "Tower of London – England",
                            Price = 65000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7491)
                        },
                        new
                        {
                            ProductID = new Guid("74a9338e-fdb6-4c06-a219-eb3de7c12b07"),
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7497),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Pháp tháp Eiffel Tower bao gồm:\r\n- 9 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a077c0d85e3866a441e4b1e76ab69dbb.webp",
                            Name = "Eiffel Tower",
                            Price = 60000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7498)
                        },
                        new
                        {
                            ProductID = new Guid("f17b9c9e-db3d-42b7-adf1-3876b7c552df"),
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7507),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Cambuchia Angkor Wat bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/edb6286c7abf2d62a36a911b5d0983d4.webp",
                            Name = "Cambuchia Angkor Wat",
                            Price = 156000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7508)
                        },
                        new
                        {
                            ProductID = new Guid("56563249-1ba3-466e-bb08-e4ab96ca4ece"),
                            CategoryID = new Guid("744bb7a2-05ec-4e10-aa48-608d5fc6125e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7513),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Nhà thờ chính Siena Cathedral - Italy bao gồm:\r\n- 19 tờ kit mô hình.\r\n- 4 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e7ac1e43b3160334e9ca1fc66da7f34a.webp",
                            Name = "Siena Cathedral - Italy",
                            Price = 124000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 172, DateTimeKind.Local).AddTicks(7514)
                        });
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HouseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "77b5473f-4397-40c2-8c21-750d3e407317",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1605e7a-5bfd-4ac0-b5a8-73af0454301b",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 31, 807, DateTimeKind.Local).AddTicks(5936),
                            Email = "bluegameming292003@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Minh Quốc Khánh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHP0HhWLUvlRhAP8TsB9O0NpjmmmedAZflMFazgZB2bAR1nKw+ZSe0htydA7I1o08w==",
                            PhoneNumber = "0934763210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24cfe60e-3f71-42d1-b1cc-4524c6e8059f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "c6d9c36f-09bf-4cd2-8fe9-8ee49e690d54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb31586e-2650-4b3b-a183-7d48f693f450",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 31, 867, DateTimeKind.Local).AddTicks(7700),
                            Email = "taimodel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Lương Tài",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMMB65QKof/Tex/Mil3CDM5sAV7CF45xaznh3vpmATIW8MZLGCRixeEcs/GPX1nsvQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1a3b317-3f6a-4aa3-8697-4f7b53c6b723",
                            TwoFactorEnabled = false,
                            UserName = "TaiModel"
                        },
                        new
                        {
                            Id = "3b7a6789-7551-4c71-9138-9cc50ce7df36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26b10cd1-0f0f-4eef-96c7-8f37cc41837a",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 31, 929, DateTimeKind.Local).AddTicks(412),
                            Email = "dinhuynhminhthu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Huỳnh Minh Thư",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHo6b0D4d5IHrsHEE1y6pTlPjPdUzqNPEmE2KjLm1aNRHFKBxipWIJMyq80lqUqYQA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a57c535-c9e2-44cc-a1ab-4e5ef7b9170b",
                            TwoFactorEnabled = false,
                            UserName = "MinhThu"
                        },
                        new
                        {
                            Id = "9c72a140-883f-4318-ba86-7eab60208c49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbfd767e-9758-400c-b7c3-ffe57f0169c7",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 31, 988, DateTimeKind.Local).AddTicks(8557),
                            Email = "ngocha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ngọc Hà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEG5z5RE85sUzzQfkhIvgKRH3n0FxFjQKkzQ8ykDs/p53og+c/0unsC08p5fH8UQ0DQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41f6a228-4b67-4567-b7bd-1495c348db50",
                            TwoFactorEnabled = false,
                            UserName = "NgocHa"
                        },
                        new
                        {
                            Id = "bba66c5f-2628-4559-8cb0-a2882839b04e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47abfa9d-f229-4ce0-8000-cbaad9d9599e",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 48, DateTimeKind.Local).AddTicks(159),
                            Email = "nguyenvungochan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Vũ Ngọc Hân",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMInea+iBXZAga9GjDWou5o896kfAsiO0D5FxKfBHU1OZIq1vQ8Uvjyi956vfAEP8g==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5749fc2-90a2-4fbb-b73e-4cf8b1df3d6b",
                            TwoFactorEnabled = false,
                            UserName = "NgocHan"
                        },
                        new
                        {
                            Id = "c3b81fe4-df66-46b7-94dc-46bfcfccba4b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aca9538d-8d39-433b-a18b-ae30e9a46d71",
                            CreatedAt = new DateTime(2024, 10, 19, 19, 8, 32, 113, DateTimeKind.Local).AddTicks(6162),
                            Email = "thuIT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thư AI",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELkwJz/6jDkcsekPjEgzNnPZtQYwL/WKI/UVpq0X+s9NlChlOxtW0UjyIYMKODcOfg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5fec51c-eb16-4b9e-b3a4-3551d05f9aad",
                            TwoFactorEnabled = false,
                            UserName = "ThuIT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca56d541-391a-4d35-9814-5b823922c37d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5d04d8f2-0688-450f-826f-cf0b5c43dc12",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "77b5473f-4397-40c2-8c21-750d3e407317",
                            RoleId = "ca56d541-391a-4d35-9814-5b823922c37d"
                        },
                        new
                        {
                            UserId = "c6d9c36f-09bf-4cd2-8fe9-8ee49e690d54",
                            RoleId = "5d04d8f2-0688-450f-826f-cf0b5c43dc12"
                        },
                        new
                        {
                            UserId = "3b7a6789-7551-4c71-9138-9cc50ce7df36",
                            RoleId = "5d04d8f2-0688-450f-826f-cf0b5c43dc12"
                        },
                        new
                        {
                            UserId = "9c72a140-883f-4318-ba86-7eab60208c49",
                            RoleId = "5d04d8f2-0688-450f-826f-cf0b5c43dc12"
                        },
                        new
                        {
                            UserId = "bba66c5f-2628-4559-8cb0-a2882839b04e",
                            RoleId = "5d04d8f2-0688-450f-826f-cf0b5c43dc12"
                        },
                        new
                        {
                            UserId = "c3b81fe4-df66-46b7-94dc-46bfcfccba4b",
                            RoleId = "5d04d8f2-0688-450f-826f-cf0b5c43dc12"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("CheckOuts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOutProduct", b =>
                {
                    b.HasOne("ArtFold.Models.CheckOut", "CheckOut")
                        .WithMany("CheckOutProducts")
                        .HasForeignKey("CheckOutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckOut");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.HasOne("ArtFold.Models.Comment", "Comment")
                        .WithMany("CommentImages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.HasOne("ArtFold.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Navigation("CheckOutProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Navigation("CommentImages");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Navigation("CheckOuts");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
